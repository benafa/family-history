{"version":3,"file":"account.js","mappings":"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","sources":["webpack://js/./js/fetch_data.js","webpack://js/./js/fetch_api_client.js","webpack://js/./js/fetch_error_handling.js","webpack://js/./js/memberspace_info.js","webpack://js/./js/memberspace/account.js"],"sourcesContent":["import { ApiClient } from './fetch_api_client';\nimport { FetchErrorHandler } from './fetch_error_handling';\n\n\n//const urlBase = 'https://api.colombochetty.com/'\nconst urlBase = 'http://localhost:5000/'\nconst loginUrl = urlBase + 'api/authenticate';\nconst logoutUrl = urlBase + 'auth/logout';\nconst refreshUrl = urlBase + 'auth/refresh_token';\nconst graphQLUrl = urlBase + 'graphql';\nconst restUrlBase = urlBase + 'api/tree/';\n\nconst MEMBERSPACE_TOKEN = \"MemberSpaceWidget.token\"\nconst ACCOUNT_PAGE = \"/account\"\n\nconst apiClient = new ApiClient();\nconst errorHandler = new FetchErrorHandler(loginUrl, refreshUrl, logoutUrl, MEMBERSPACE_TOKEN, ACCOUNT_PAGE, apiClient);\n\nexport async function getRestDataWrapper(url_end) {\n    var restUrl = restUrlBase + url_end;\n\n    try {\n        return await apiClient.getRestData(restUrl);\n    } catch (error) {\n        //console.log(\"Error in REST\");\n        //console.log(restUrl);\n        return await errorHandler.handleRestError(error, restUrl);\n    }\n}\n\nexport async function getGraphQLDataWrapper(query) {\n    try {\n        return await apiClient.getGraphQLData(graphQLUrl, query);\n    } catch (error) {\n        //console.log(\"Error in GraphQL\");\n        //console.log(graphQLUrl);\n        return await errorHandler.handleGraphQLError(error, graphQLUrl, query);\n    }\n}\n\nexport { apiClient, logoutUrl }","export class ApiClient {\n    async login(loginUrl, credential_data) {\n        const loginResponse = await fetch(loginUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(credential_data), \n            credentials: 'include'\n        });\n\n        if (!loginResponse.ok) {\n            throw loginResponse;\n        }\n    }\n\n    async logout(logoutUrl) {\n        const logoutResponse = await fetch(logoutUrl, {\n            method: 'POST',\n            credentials: 'include'\n        });\n\n        if (!logoutResponse.ok) {\n            throw logoutResponse;\n        }\n    }\n\n    async refreshToken(refreshUrl) {\n        const csrfToken = this.getCookie('csrf_refresh_token');\n\n        const refreshResponse = await fetch(refreshUrl, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'X-CSRF-TOKEN-REFRESH': csrfToken\n            }\n        });\n\n        if (!refreshResponse.ok) {\n            throw refreshResponse;\n        }\n    }\n\n    async getRestData(restUrl) {\n        const response = await fetch(restUrl, {\n            method: 'GET',\n            credentials: 'include'\n        });\n\n        if (!response.ok) {\n            throw response;\n        }\n\n        const data = await response.text();\n        return data;\n    }\n\n    async getGraphQLData(graphqlUrl, query) {\n        const csrfToken = this.getCookie('csrf_access_token'); \n\n        const response = await fetch(graphqlUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRF-TOKEN-ACCESS': csrfToken\n            },\n            body: JSON.stringify({ query }),\n            credentials: 'include' \n        });\n\n        if (!response.ok) {\n            throw response;\n        }\n\n        const data = await response.json();\n        return data\n    }\n    \n    // Helper function to get a cookie by name\n     getCookie(name) {\n        let cookieValue = null;\n        if (document.cookie && document.cookie !== '') {\n            const cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                const cookie = cookies[i].trim();\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n}","import { getMemberSpaceCredentials } from './memberspace_info';\n\nconst JWT_MISSING = \"Missing cookie \\\"access_token_cookie\\\"\";\nconst JWT_EXPIRED = \"Token has expired\";\nconst JWT_SIG_FAILURE = \"Signature verification failed\";\n\nexport class FetchErrorHandler {\n    constructor(loginUrl, refreshUrl, logoutUrl, tokenName, redirectPage, apiClient) {\n        this.loginUrl = loginUrl;\n        this.logoutUrl = logoutUrl;\n        this.refreshUrl = refreshUrl;\n        this.memberspace_tokenName = tokenName;\n        this.redirectPage = redirectPage;\n        this.apiClient = apiClient;\n    }\n\n    async handleGraphQLError(error, graphQLUrl, query) {\n        try {\n            if (this.isUnauthorizedError(error)) {\n                //console.log(\"handleGraphQLError\");\n                await this.handleUnauthorizedError(error);\n                return await this.apiClient.getGraphQLData(graphQLUrl, query);\n            } else {\n                if (this.isSigFailure(error)) {\n                    console.log(\"Signature failure error\");\n                }\n                await this.handleLogout();\n                throw error;\n            }\n        } catch(error) {\n            //console.log(error);\n            throw error;\n        }\n    }\n\n    async handleRestError(error, restUrl) {\n        try {\n            if (this.isUnauthorizedError(error)) {\n                //console.log(\"handleRestError\");\n                await this.handleUnauthorizedError(error);\n                return await this.apiClient.getRestData(restUrl);\n            } else {\n                if (this.isSigFailure(error)) {\n                    console.log(\"Signature failure error\");\n                }\n                await this.handleLogout();\n                throw error;\n            }\n        } catch(error) {\n            //console.log(error);\n            throw error;\n        }\n    }\n\n    async handleUnauthorizedError(error) {\n        const errorBody = await error.json();\n        if (errorBody.msg === JWT_EXPIRED) {\n            await this.handleRefresh();\n        } else if (errorBody.msg === JWT_MISSING) {\n            const credentialData = await getMemberSpaceCredentials();\n            await this.apiClient.login(this.loginUrl, credentialData);\n        } else {\n            throw error;\n        }\n    }\n\n    async handleRefresh() {\n        try {\n            await this.apiClient.refreshToken(this.refreshUrl);\n        } catch(error) {\n            this.handleLogout();\n            throw error;\n        }\n    }\n\n    async handleLogout() {\n        localStorage.removeItem(this.memberspace_tokenName);\n        await this.apiClient.logout(this.logoutUrl);\n        window.location.href = this.redirectPage;\n    }\n\n    isUnauthorizedError(error) {\n        return error instanceof Response && error.status === 401;\n    }\n\n    isSigFailure(error) {\n        return error instanceof Response && error.status === 422;\n    }\n}","var DEFAULT_EMAIL = 'ben.anandappa@gmail.com'\nvar DEFAULT_ID ='5130204'\n\n// Function to wait until MemberSpace is defined\nfunction waitForMemberSpace() {\n    return new Promise((resolve, reject) => {\n        const maxWaitTime = 10000; // Maximum wait time in milliseconds\n        const intervalTime = 100;  // Interval time to check in milliseconds\n        let elapsedTime = 0;\n\n        const interval = setInterval(() => {\n            if (typeof MemberSpace !== 'undefined') {\n                clearInterval(interval);\n                resolve();\n            } else {\n                elapsedTime += intervalTime;\n                if (elapsedTime >= maxWaitTime) {\n                    clearInterval(interval);\n                    reject('MemberSpace did not become available within the maximum wait time.');\n                }\n            }\n        }, intervalTime);\n    });\n}\n\n// Function to get MemberSpace information\nvar getMsReadyPromise = () => new Promise((resolve, reject) => {\n    // Check if MemberSpace is ready\n    if (MemberSpace.ready) {\n        try {\n            resolve(window.MemberSpace.getMemberInfo());\n        } catch (error) {\n            reject('Error fetching MemberSpace member info: ' + error);\n        }\n    } else {\n        const handleReady = ({ detail }) => {\n            try {\n                resolve(detail);\n            } catch (error) {\n                reject('Error in MemberSpace.ready event: ' + error);\n            }\n            document.removeEventListener('MemberSpace.ready', handleReady);\n        };\n\n        document.addEventListener('MemberSpace.ready', handleReady);\n    }\n});\n\nexport async function getMemberSpaceCredentials() {\n    //console.log(\"getMemberSpaceCredentials\");\n    var isLoggedIn = false;\n    var credential_data = {\n        email: DEFAULT_EMAIL,\n        user_id: DEFAULT_ID\n    };\n\n    try {\n        // Wait for MemberSpace to become available\n        await waitForMemberSpace();\n        //console.log(\"MemberSpace is ready\");\n\n        const data = await getMsReadyPromise();\n\n        //console.log(\"MemberSpace data is ready\");\n\n        isLoggedIn = data && data.isLoggedIn;\n        if (isLoggedIn) {\n            credential_data.email = data.memberInfo.email;\n            credential_data.user_id = data.memberInfo.id;\n        }\n    } catch(error) {\n        console.log(`Error with MemberSpace: ${error}`);\n    }\n\n    //console.log(\"Return creds\");\n    return credential_data;\n}","import { apiClient, logoutUrl} from '../fetch_data';\n\nconst handleReady = ({ detail }) => {\n  var elements = document.getElementsByClassName('account_info');\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].style.display = 'block';\n  }\n\n  const { memberInfo } = detail;\n\n  if (memberInfo) {\n    //console.log(memberInfo.email)\n    var elements = document.getElementsByClassName('site_info');\n\n    for (var i = 0; i < elements.length; i++) {\n        elements[i].style.display = 'none';\n    }\n\n    // using textContent\n\tvar title = document.getElementById('page-title');\n\ttitle.textContent = 'Account Homepage'; \n  } else {\n  \tvar elements = document.getElementsByClassName('site_info');\n\n    for (var i = 0; i < elements.length; i++) {\n        elements[i].style.display = 'block';\n    }\n\n    // using textContent\n\tvar title = document.getElementById('page-title');\n\ttitle.textContent = 'Login or create an account';\n  }\n}\n\nconst handleLogout = () => {\n    console.log(\"Logout of flask app\");\n    apiClient.logout(logoutUrl);\n}\n\ndocument.addEventListener('MemberSpace.ready', handleReady);\ndocument.addEventListener('MemberSpace.member.logout', handleLogout);"],"names":["urlBase","loginUrl","logoutUrl","refreshUrl","apiClient","login","credential_data","loginResponse","fetch","method","headers","body","JSON","stringify","credentials","ok","logout","logoutResponse","refreshToken","csrfToken","this","getCookie","refreshResponse","getRestData","restUrl","response","text","getGraphQLData","graphqlUrl","query","json","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","constructor","tokenName","redirectPage","memberspace_tokenName","handleGraphQLError","error","graphQLUrl","isUnauthorizedError","handleUnauthorizedError","isSigFailure","console","log","handleLogout","handleRestError","errorBody","msg","handleRefresh","credentialData","async","email","user_id","Promise","resolve","reject","elapsedTime","interval","setInterval","MemberSpace","clearInterval","data","ready","window","getMemberInfo","handleReady","detail","removeEventListener","addEventListener","isLoggedIn","memberInfo","id","getMemberSpaceCredentials","localStorage","removeItem","location","href","Response","status","elements","getElementsByClassName","style","display","getElementById","textContent"],"sourceRoot":""}
{"version":3,"file":"table.js","mappings":"AAoCAA,OAAOC,iBAAiB,oBAAoB,WAG1C,IADA,IAAIC,EAAUC,SAASC,qBAAqB,MACnCC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAClCH,EAAQG,GAAGE,UAAUC,IAAI,eAG3B,MAAMC,EAAcN,SAASO,eAAe,eAEtCC,EADQR,SAASO,eAAe,WACnBE,iBAAiB,wBAGpCH,EAAYI,MAAQ,GAiCpBF,EAAKG,SAASC,IACZA,EAAIC,QAAQC,SAA2BF,EAAIG,YAnBxCC,cACAC,QAAQ,cAAe,KACvBC,OACAC,MAAM,KACNC,QAAQC,GAASA,EAAKlB,OAAS,IAC/BmB,KAAK,IAc+C,IAGzDhB,EAAYR,iBACV,QAnCF,SAAkByB,EAAMC,GACtB,IAAIC,EACJ,OAAO,YAAaC,GAClB,MAAMC,EAAUC,KAChBC,aAAaJ,GACbA,EAAUK,YAAW,IAAMP,EAAKQ,MAAMJ,EAASD,IAmD9C,IAlDH,CACF,CA6BEM,EAAS,WACP,MAAMC,EAAuC3B,EAAYI,MAdxDM,cACAC,QAAQ,cAAe,KACvBC,OACAC,MAAM,KAaP,IAAK,MAAMP,KAAOJ,EAAM,CACtB,MAAM0B,EAActB,EAAIC,QAAQC,SAM1BqB,EAJWF,EAAiBG,KAAKC,GAC9BH,EAAYI,SAASD,KAGFE,OAAOF,IACd,IAAZA,IAIPzB,EAAI4B,MAAMC,QADRN,EACkB,GAEA,MAExB,CACF,IAEJ,IAYAtC,OAAOC,iBAAiB,YAAY,SAAU4C,GAT5CpC,YAAYI,MAAQ,GACNV,SAASO,eAAe,WACnBE,iBAAiB,wBAC/BE,SAASC,IACZA,EAAI4B,MAAMC,QAAU,EAAE,GAO1B,IAEA5C,OAAO8C,UA7HP,SAAmBC,GACjB,MAAMC,EAAQ7C,SAASO,eAAe,WAChCR,EAAU8C,EAAMpC,iBAAiB,MACjCD,EAAOsC,MAAMC,KAAKF,EAAMpC,iBAAiB,yBACzCuC,EAAgBjD,EAAQ6C,GAIxBK,EAAwB,SADXD,EAAcnC,QAAQqC,SAAW,QACd,OAAS,MAG/CnD,EAAQY,SAASwC,IACfA,EAAO/C,UAAUgD,OAAO,aAAc,cAAe,eACrDD,EAAOtC,QAAQqC,QAAU,OACzBC,EAAO/C,UAAUC,IAAI,cAAc,IAGrC2C,EAAc5C,UAAUgD,OAAO,eAC/BJ,EAAc5C,UAAUC,IAAI,UAAU4C,KACtCD,EAAcnC,QAAQqC,QAAUD,EAGhCzC,EAAK6C,MAAK,CAACC,EAAGC,KACZ,MAAMC,EAAIF,EAAEG,MAAMb,GAAQ7B,YAAYG,OAChCwC,EAAIH,EAAEE,MAAMb,GAAQ7B,YAAYG,OAChCyC,EAAaC,MAAMJ,GAAKA,EAAEK,cAAcH,GAAKI,WAAWN,GAAKM,WAAWJ,GAE9E,MAAkB,QAAXT,EAAmBU,GAAcA,CAAU,IAIpD,IAAK,MAAM/C,KAAOJ,EAChBqC,EAAMkB,QAAQ,GAAGC,YAAYpD,EAEjC","sources":["webpack://js/./js/table.js"],"sourcesContent":["function sortTable(column) {\n  const table = document.getElementById(\"myTable\");\n  const headers = table.querySelectorAll(\"th\");\n  const rows = Array.from(table.querySelectorAll(\"tr:not(:first-child)\"));\n  const currentHeader = headers[column];\n\n  // Determine the sort direction\n  const currentDir = currentHeader.dataset.sortDir || \"none\";\n  const newDir = currentDir === \"asc\" ? \"desc\" : \"asc\";\n\n  // Remove sorted classes from all headers and set the new sort direction\n  headers.forEach((header) => {\n    header.classList.remove(\"sorted-asc\", \"sorted-desc\", \"sorted-none\");\n    header.dataset.sortDir = \"none\";\n    header.classList.add(\"sorted-none\");\n  });\n\n  currentHeader.classList.remove(\"sorted-none\");\n  currentHeader.classList.add(`sorted-${newDir}`);\n  currentHeader.dataset.sortDir = newDir;\n\n  // Sort the rows array based on the selected column\n  rows.sort((a, b) => {\n    const x = a.cells[column].textContent.trim();\n    const y = b.cells[column].textContent.trim();\n    const compareVal = isNaN(x) ? x.localeCompare(y) : parseFloat(x) - parseFloat(y);\n\n    return newDir === \"asc\" ? compareVal : -compareVal;\n  });\n\n  // Reinsert the sorted rows into the table\n  for (const row of rows) {\n    table.tBodies[0].appendChild(row);\n  }\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n   // Add the 'sorted-none' class to all column headers\n  var headers = document.getElementsByTagName(\"th\");\n  for (var i = 0; i < headers.length; i++) {\n    headers[i].classList.add(\"sorted-none\");\n  }\n\n  const searchInput = document.getElementById(\"searchInput\");\n  const table = document.getElementById(\"myTable\");\n  const rows = table.querySelectorAll(\"tr:not(:first-child)\");\n\n  // Clear the search input\n  searchInput.value = \"\";\n\n  // Debounce function to limit the number of times the search function is called\n  function debounce(func, wait) {\n    let timeout;\n    return function (...args) {\n      const context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n  }\n\n  // Function to extract relevant keywords from a string\n  function extractKeywords(text) {\n    return text\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \" \") // Replace non-alphanumeric characters with spaces\n      .trim() // Remove leading and trailing spaces\n      .split(\" \") // Split into an array of words\n      .filter((word) => word.length > 2) // Filter out words with less than 3 characters\n      .join(\" \"); // Join the array back into a space-separated string\n  }\n\n  // Function to extract relevant keywords from a string\n  function extractKeywordsList(text) {\n    return text\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \" \") // Replace non-alphanumeric characters with spaces\n      .trim() // Remove leading and trailing spaces\n      .split(\" \") // Split into an array of words\n  }\n\n  // Cache the relevant keywords in the data-keywords attribute\n  rows.forEach((row) => {\n    row.dataset.keywords = extractKeywords(row.textContent);\n  });\n\n  searchInput.addEventListener(\n    \"keyup\",\n    debounce(function () {\n      const searchStringList = extractKeywordsList(searchInput.value);\n\n      for (const row of rows) {\n        const rowKeywords = row.dataset.keywords;\n\n        const newArray = searchStringList.map((element) => {\n          return rowKeywords.includes(element);\n        });\n\n        const areAllTrue = newArray.every((element) => {\n          return element === true;\n        });\n\n        if (areAllTrue) {\n          row.style.display = \"\";\n        } else {\n          row.style.display = \"none\";\n        }\n      }\n    }, 100)\n  );\n});\n\nfunction clearSearchAndResetRows() {\n  searchInput.value = \"\";\n  const table = document.getElementById(\"myTable\");\n  const rows = table.querySelectorAll(\"tr:not(:first-child)\");\n  rows.forEach((row) => {\n    row.style.display = \"\";\n  });\n}\n\n// Clear the search input and reset rows display when the back button is pressed\nwindow.addEventListener(\"pageshow\", function (event) {\n  clearSearchAndResetRows();\n});\n\nwindow.sortTable = sortTable;"],"names":["window","addEventListener","headers","document","getElementsByTagName","i","length","classList","add","searchInput","getElementById","rows","querySelectorAll","value","forEach","row","dataset","keywords","textContent","toLowerCase","replace","trim","split","filter","word","join","func","wait","timeout","args","context","this","clearTimeout","setTimeout","apply","debounce","searchStringList","rowKeywords","areAllTrue","map","element","includes","every","style","display","event","sortTable","column","table","Array","from","currentHeader","newDir","sortDir","header","remove","sort","a","b","x","cells","y","compareVal","isNaN","localeCompare","parseFloat","tBodies","appendChild"],"sourceRoot":""}